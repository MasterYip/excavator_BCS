<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Excavator\Excavator.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Excavator\Excavator.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sat Jul 30 11:55:53 2022
<BR><P>
<H3>Maximum Stack Usage =       1152 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RobotArm_Resolver &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">DMA1_Channel4_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">DMA1_Channel5_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">DMA1_Channel6_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">DMA1_Channel7_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[18]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">TIM6_IRQHandler</a> from stm32f1xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">motor_cmd_Callback(const geometry_msgs::Twist&)</a> from uart_node.o(i._Z18motor_cmd_CallbackRKN13geometry_msgs5TwistE) referenced from uart_node.o(i.__sti___11_uart_node_c_nh)
 <LI><a href="#[5c]">joint_state_cmd_Callback(const sensor_msgs::JointState&)</a> from uart_node.o(i._Z24joint_state_cmd_CallbackRKN11sensor_msgs10JointStateE) referenced from uart_node.o(i.__sti___11_uart_node_c_nh)
 <LI><a href="#[5f]">sensor_msgs::JointState::deserialize(unsigned char*)</a> from uart_node.o(i._ZN11sensor_msgs10JointState11deserializeEPh) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
 <LI><a href="#[61]">sensor_msgs::JointState::getMD5()</a> from uart_node.o(i._ZN11sensor_msgs10JointState6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
 <LI><a href="#[60]">sensor_msgs::JointState::getType()</a> from uart_node.o(i._ZN11sensor_msgs10JointState7getTypeEv) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
 <LI><a href="#[64]">sensor_msgs::Imu::getMD5()</a> from uart_node.o(i._ZN11sensor_msgs3Imu6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[63]">sensor_msgs::Imu::getType()</a> from uart_node.o(i._ZN11sensor_msgs3Imu7getTypeEv) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[67]">geometry_msgs::Quaternion::getMD5()</a> from uart_node.o(i._ZN13geometry_msgs10Quaternion6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[66]">geometry_msgs::Quaternion::getType()</a> from uart_node.o(i._ZN13geometry_msgs10Quaternion7getTypeEv) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[69]">geometry_msgs::Twist::deserialize(unsigned char*)</a> from uart_node.o(i._ZN13geometry_msgs5Twist11deserializeEPh) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[6b]">geometry_msgs::Twist::getMD5()</a> from uart_node.o(i._ZN13geometry_msgs5Twist6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[6a]">geometry_msgs::Twist::getType()</a> from uart_node.o(i._ZN13geometry_msgs5Twist7getTypeEv) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[6d]">geometry_msgs::Vector3::deserialize(unsigned char*)</a> from uart_node.o(i._ZN13geometry_msgs7Vector311deserializeEPh) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[6f]">geometry_msgs::Vector3::getMD5()</a> from uart_node.o(i._ZN13geometry_msgs7Vector36getMD5Ev) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[6e]">geometry_msgs::Vector3::getType()</a> from uart_node.o(i._ZN13geometry_msgs7Vector37getTypeEv) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[71]">rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</a> from uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[73]">rosserial_msgs::RequestParamResponse::getMD5()</a> from uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[72]">rosserial_msgs::RequestParamResponse::getType()</a> from uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[76]">rosserial_msgs::Log::getMD5()</a> from uart_node.o(i._ZN14rosserial_msgs3Log6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[75]">rosserial_msgs::Log::getType()</a> from uart_node.o(i._ZN14rosserial_msgs3Log7getTypeEv) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[79]">rosserial_msgs::TopicInfo::getMD5()</a> from uart_node.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[78]">rosserial_msgs::TopicInfo::getType()</a> from uart_node.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[7c]">ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getMsgType()</a> from uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE10getMsgTypeEv) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
 <LI><a href="#[7b]">ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getEndpointType()</a> from uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE15getEndpointTypeEv) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
 <LI><a href="#[7a]">ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::callback(unsigned char*)</a> from uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE8callbackEPh) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
 <LI><a href="#[7d]">ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getMsgMD5()</a> from uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE9getMsgMD5Ev) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
 <LI><a href="#[80]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgType()</a> from uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[7f]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getEndpointType()</a> from uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[7e]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)</a> from uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[81]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgMD5()</a> from uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev) referenced from uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[82]">ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)</a> from uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE) referenced from uart_node.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
 <LI><a href="#[83]">ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()</a> from uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv) referenced from uart_node.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
 <LI><a href="#[59]">[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[59]">[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[5b]">[local to stm32f1xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[58]">[local to stm32f1xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_DMATxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[5a]">[local to stm32f1xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[56]">[local to stm32f1xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[57]">[local to stm32f1xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f20UART_DMATransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[86]">std_msgs::Time::deserialize(unsigned char*)</a> from uart_node.o(i._ZN8std_msgs4Time11deserializeEPh) referenced from uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[88]">std_msgs::Time::getMD5()</a> from uart_node.o(i._ZN8std_msgs4Time6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[87]">std_msgs::Time::getType()</a> from uart_node.o(i._ZN8std_msgs4Time7getTypeEv) referenced from uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[8a]">std_msgs::Header::deserialize(unsigned char*)</a> from uart_node.o(i._ZN8std_msgs6Header11deserializeEPh) referenced from uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[8c]">std_msgs::Header::getMD5()</a> from uart_node.o(i._ZN8std_msgs6Header6getMD5Ev) referenced from uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[8b]">std_msgs::Header::getType()</a> from uart_node.o(i._ZN8std_msgs6Header7getTypeEv) referenced from uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[5e]">sensor_msgs::JointState::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK11sensor_msgs10JointState9serializeEPh) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
 <LI><a href="#[62]">sensor_msgs::Imu::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK11sensor_msgs3Imu9serializeEPh) referenced from uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[65]">geometry_msgs::Quaternion::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK13geometry_msgs10Quaternion9serializeEPh) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[68]">geometry_msgs::Twist::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK13geometry_msgs5Twist9serializeEPh) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[6c]">geometry_msgs::Vector3::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK13geometry_msgs7Vector39serializeEPh) referenced from uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[70]">rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[74]">rosserial_msgs::Log::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK14rosserial_msgs3Log9serializeEPh) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[77]">rosserial_msgs::TopicInfo::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh) referenced from uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[85]">std_msgs::Time::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK8std_msgs4Time9serializeEPh) referenced from uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[89]">std_msgs::Header::serialize(unsigned char*) const</a> from uart_node.o(i._ZNK8std_msgs6Header9serializeEPh) referenced from uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[84]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from uart_node.o(.constdata__ZTVN3ros11Subscriber_E)
 <LI><a href="#[84]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from uart_node.o(.constdata__ZTVN3ros15NodeHandleBase_E)
 <LI><a href="#[84]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from uart_node.o(.constdata__ZTVN3ros3MsgE)
 <LI><a href="#[8e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[8d]">__sti___11_uart_node_c_nh</a> from uart_node.o(i.__sti___11_uart_node_c_nh) referenced from uart_node.o(.init_array)
 <LI><a href="#[55]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[54]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[93]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1dd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1de]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[91]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1e4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Get_Gyro_Static_Error &rArr; get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*) &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ca]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[28]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::deserialize(unsigned char*)
</UL>

<P><STRONG><a name="[ac]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ae]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[179]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::serialize(unsigned char*) const
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::serialize(unsigned char*) const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::write(unsigned char*, int)
</UL>

<P><STRONG><a name="[b1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_teleop_ctrl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_Callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_teleop_ctrl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_Callback(const geometry_msgs::Twist&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joint_State_pub()
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[a8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1f0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b4]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[96]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[aa]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[a9]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[b7]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[b9]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[1f2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[54]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1f3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1f5]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[bf]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bb]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b5]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c4]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[a6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[9d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a2]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c7]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[c6]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[19a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[cb]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1f7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[cc]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[ce]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cf]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[bd]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[be]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[d0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>Butterworth30HzLPF</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, filter_1.o(i.Butterworth30HzLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Butterworth30HzLPF &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFUpdate6axis
</UL>

<P><STRONG><a name="[d5]"></a>Butterworth50HzLPF</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, filter_1.o(i.Butterworth50HzLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Butterworth50HzLPF &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFUpdate6axis
</UL>

<P><STRONG><a name="[24]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[d7]"></a>Get_Gyro_Static_Error</STRONG> (Thumb, 158 bytes, Stack size 176 bytes, seekfree_icm20602.o(i.Get_Gyro_Static_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Get_Gyro_Static_Error &rArr; get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*) &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>HAL_DMA_Abort</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 910 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[dd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[d9]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_simspi(ICM_CS_POINTER)
</UL>

<P><STRONG><a name="[f1]"></a>HAL_GPIO_Init</STRONG> (Thumb, 792 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_wr_byte(unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[138]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_w_reg_byte(unsigned char, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_wr_byte(unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>

<P><STRONG><a name="[155]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_MspInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; [local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SPI_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; [local to stm32f1xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RobotArm_Resolver &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; [local to stm32f1xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 486 bytes, Stack size 376 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; RobotArm_Resolver &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_teleop_ctrl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUs_update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_UART_MspInit</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[12c]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCplt_ROSCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[175]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
</UL>

<P><STRONG><a name="[12e]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; USART_TxCplt_ROSCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCplt_ROSCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[176]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>IMU_Data_Init</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, excavatorsettings.o(i.IMU_Data_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>IMUs_update</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mahony_filter.o(i.IMUs_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = IMUs_update &rArr; IMUupdate &rArr; Attitude_Computation(Filter6axisTypeDef, IMU_data*) &rArr; asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[132]"></a>IMUupdate</STRONG> (Thumb, 134 bytes, Stack size 256 bytes, mahony_filter.o(i.IMUupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = IMUupdate &rArr; Attitude_Computation(Filter6axisTypeDef, IMU_data*) &rArr; asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFUpdate6axis
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUs_update
</UL>

<P><STRONG><a name="[134]"></a>LPFUpdate6axis</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, filter_1.o(i.LPFUpdate6axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPFUpdate6axis &rArr; Butterworth50HzLPF &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth50HzLPF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth30HzLPF
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
</UL>

<P><STRONG><a name="[136]"></a>MX_DMA_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MX_GPIO_Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>MX_SPI2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_TIM2_Init</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>MX_TIM3_Init</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MX_TIM4_Init</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>MX_TIM8_Init</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, tim.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>Motor_Control</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, drive_layer.o(i.Motor_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control
</UL>

<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>PID_arm_controller</STRONG> (Thumb, 266 bytes, Stack size 120 bytes, control_layer.o(i.PID_arm_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PID_arm_controller &rArr; Vector_Control_with_Time_Limited &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joint_state_cmd_Callback(const sensor_msgs::JointState&)
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>QuaternionReviser</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, robotarm.o(i.QuaternionReviser))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = QuaternionReviser &rArr; Q(float, float, float*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[149]"></a>RevVector_Quantification</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, quantization_layer.o(i.RevVector_Quantification))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RevVector_Quantification &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_Callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[14a]"></a>RevVector_Superposition</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, control_layer.o(i.RevVector_Superposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RevVector_Superposition &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_Callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[114]"></a>RobotArm_Resolver</STRONG> (Thumb, 1508 bytes, Stack size 568 bytes, robotarm.o(i.RobotArm_Resolver))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = RobotArm_Resolver &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross(float*, float*, float*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qrot(float*, float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RobotArm_Resolver &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[10c]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[f7]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[106]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[129]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[12b]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>USART_RxCplt_ROSCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_node.o(i.USART_RxCplt_ROSCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[12f]"></a>USART_TxCplt_ROSCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_node.o(i.USART_TxCplt_ROSCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_TxCplt_ROSCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>Vector_Control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, drive_layer.o(i.Vector_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector_Control &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[118]"></a>Vector_Control_with_Time_Limited</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, drive_layer.o(i.Vector_Control_with_Time_Limited))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Vector_Control_with_Time_Limited &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_teleop_ctrl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cmd_Callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[158]"></a>IMU_Data_pub()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, uart_node.o(i._Z12IMU_Data_pubv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IMU_Data_pub() &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[15b]"></a>Joint_State_pub()</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, uart_node.o(i._Z15Joint_State_pubv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Joint_State_pub() &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[15c]"></a>SystemClock_Config()</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>icm_simspi_wr_byte(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, seekfree_icm20602.o(i._Z18icm_simspi_wr_byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_w_reg_byte(unsigned char, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[5d]"></a>motor_cmd_Callback(const geometry_msgs::Twist&)</STRONG> (Thumb, 86 bytes, Stack size 256 bytes, uart_node.o(i._Z18motor_cmd_CallbackRKN13geometry_msgs5TwistE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = motor_cmd_Callback(const geometry_msgs::Twist&) &rArr; Vector_Control_with_Time_Limited &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Superposition
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Quantification
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(i.__sti___11_uart_node_c_nh)
</UL>
<P><STRONG><a name="[147]"></a>Q(float, float, float*)</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, robotarm.o(i._Z1QffPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Q(float, float, float*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
</UL>

<P><STRONG><a name="[135]"></a>Attitude_Computation(Filter6axisTypeDef, IMU_data*)</STRONG> (Thumb, 1656 bytes, Stack size 144 bytes, mahony_filter.o(i._Z20Attitude_Computation18Filter6axisTypeDefP8IMU_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Attitude_Computation(Filter6axisTypeDef, IMU_data*) &rArr; asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
</UL>

<P><STRONG><a name="[161]"></a>icm20602_init_simspi(ICM_CS_POINTER)</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, seekfree_icm20602.o(i._Z20icm20602_init_simspi14ICM_CS_POINTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icm20602_init_simspi(ICM_CS_POINTER) &rArr; icm20602_self4_check(GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_w_reg_byte(unsigned char, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self4_check(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
</UL>

<P><STRONG><a name="[162]"></a>icm20602_self4_check(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, seekfree_icm20602.o(i._Z20icm20602_self4_checkP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_self4_check(GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_simspi(ICM_CS_POINTER)
</UL>

<P><STRONG><a name="[164]"></a>icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, seekfree_icm20602.o(i._Z21icm_simspi_r_reg_bytehPhP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self4_check(GPIO_TypeDef*, unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_simspi(ICM_CS_POINTER)
</UL>

<P><STRONG><a name="[163]"></a>icm_simspi_w_reg_byte(unsigned char, unsigned char, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, seekfree_icm20602.o(i._Z21icm_simspi_w_reg_bytehhP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icm_simspi_w_reg_byte(unsigned char, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_simspi(ICM_CS_POINTER)
</UL>

<P><STRONG><a name="[165]"></a>icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, seekfree_icm20602.o(i._Z22icm_simspi_r_reg_byteshPhhP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
</UL>

<P><STRONG><a name="[d8]"></a>get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, seekfree_icm20602.o(i._Z24get_icm20602_data_simspi14ICM_CS_POINTERP8IMU_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*) &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data
</UL>

<P><STRONG><a name="[5c]"></a>joint_state_cmd_Callback(const sensor_msgs::JointState&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_node.o(i._Z24joint_state_cmd_CallbackRKN11sensor_msgs10JointStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = joint_state_cmd_Callback(const sensor_msgs::JointState&) &rArr; PID_arm_controller &rArr; Vector_Control_with_Time_Limited &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(i.__sti___11_uart_node_c_nh)
</UL>
<P><STRONG><a name="[152]"></a>Dot(float*, float*, float*)</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, robotarm.o(i._Z3DotPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dot(float*, float*, float*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qrot(float*, float*, float*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
</UL>

<P><STRONG><a name="[167]"></a>Conj(float*, float*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, robotarm.o(i._Z4ConjPfS_))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qrot(float*, float*, float*)
</UL>

<P><STRONG><a name="[14c]"></a>Qrot(float*, float*, float*)</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, robotarm.o(i._Z4QrotPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Qrot(float*, float*, float*) &rArr; Dot(float*, float*, float*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conj(float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
</UL>

<P><STRONG><a name="[14d]"></a>Cross(float*, float*, float*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, robotarm.o(i._Z5CrossPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cross(float*, float*, float*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
</UL>

<P><STRONG><a name="[14e]"></a>jiajiao(float*, float*)</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, robotarm.o(i._Z7jiajiaoPfS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = jiajiao(float*, float*) &rArr; acosf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
</UL>

<P><STRONG><a name="[148]"></a>lxiangdui(float*, float*, float*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, robotarm.o(i._Z9lxiangduiPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lxiangdui(float*, float*, float*) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conj(float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
</UL>

<P><STRONG><a name="[5f]"></a>sensor_msgs::JointState::deserialize(unsigned char*)</STRONG> (Thumb, 916 bytes, Stack size 48 bytes, uart_node.o(i._ZN11sensor_msgs10JointState11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sensor_msgs::JointState::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
</UL>
<P><STRONG><a name="[61]"></a>sensor_msgs::JointState::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN11sensor_msgs10JointState6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
</UL>
<P><STRONG><a name="[60]"></a>sensor_msgs::JointState::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN11sensor_msgs10JointState7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
</UL>
<P><STRONG><a name="[16c]"></a>sensor_msgs::JointState::JointState()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_node.o(i._ZN11sensor_msgs10JointStateC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_msgs::JointState::JointState() &rArr; std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
</UL>

<P><STRONG><a name="[1fa]"></a>sensor_msgs::JointState::JointState__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uart_node.o(i._ZN11sensor_msgs10JointStateC1Ev), UNUSED)

<P><STRONG><a name="[64]"></a>sensor_msgs::Imu::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN11sensor_msgs3Imu6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[63]"></a>sensor_msgs::Imu::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN11sensor_msgs3Imu7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[16f]"></a>sensor_msgs::Imu::Imu()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart_node.o(i._ZN11sensor_msgs3ImuC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensor_msgs::Imu::Imu() &rArr; std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
</UL>

<P><STRONG><a name="[1fb]"></a>sensor_msgs::Imu::Imu__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uart_node.o(i._ZN11sensor_msgs3ImuC1Ev), UNUSED)

<P><STRONG><a name="[156]"></a>STM32Hardware::reset_rbuf()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_node.o(i._ZN13STM32Hardware10reset_rbufEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCplt_ROSCallback
</UL>

<P><STRONG><a name="[171]"></a>STM32Hardware::time()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_node.o(i._ZN13STM32Hardware4timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32Hardware::time()
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
</UL>

<P><STRONG><a name="[157]"></a>STM32Hardware::flush()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uart_node.o(i._ZN13STM32Hardware5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCplt_ROSCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::write(unsigned char*, int)
</UL>

<P><STRONG><a name="[172]"></a>STM32Hardware::write(unsigned char*, int)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart_node.o(i._ZN13STM32Hardware5writeEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = STM32Hardware::write(unsigned char*, int) &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)
</UL>

<P><STRONG><a name="[67]"></a>geometry_msgs::Quaternion::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs10Quaternion6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[66]"></a>geometry_msgs::Quaternion::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs10Quaternion7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[69]"></a>geometry_msgs::Twist::deserialize(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_node.o(i._ZN13geometry_msgs5Twist11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[6b]"></a>geometry_msgs::Twist::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs5Twist6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[6a]"></a>geometry_msgs::Twist::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs5Twist7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[6d]"></a>geometry_msgs::Vector3::deserialize(unsigned char*)</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, uart_node.o(i._ZN13geometry_msgs7Vector311deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[6f]"></a>geometry_msgs::Vector3::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs7Vector36getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[6e]"></a>geometry_msgs::Vector3::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN13geometry_msgs7Vector37getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[170]"></a>geometry_msgs::Vector3::Vector3()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_node.o(i._ZN13geometry_msgs7Vector3C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
</UL>

<P><STRONG><a name="[1fc]"></a>geometry_msgs::Vector3::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uart_node.o(i._ZN13geometry_msgs7Vector3C1Ev), UNUSED)

<P><STRONG><a name="[71]"></a>rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[73]"></a>rosserial_msgs::RequestParamResponse::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[72]"></a>rosserial_msgs::RequestParamResponse::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[76]"></a>rosserial_msgs::Log::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs3Log6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[75]"></a>rosserial_msgs::Log::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs3Log7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[79]"></a>rosserial_msgs::TopicInfo::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[78]"></a>rosserial_msgs::TopicInfo::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[18e]"></a>ros::Subscriber_::Subscriber___sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros11Subscriber_C2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int)
</UL>

<P><STRONG><a name="[19d]"></a>ros::normalizeSecNSec(unsigned&, unsigned&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, time.o(i._ZN3ros16normalizeSecNSecERjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()
</UL>

<P><STRONG><a name="[16d]"></a>ros::Msg::Msg__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros3MsgC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::JointState()
</UL>

<P><STRONG><a name="[178]"></a>ros::Time::Time()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros4TimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
</UL>

<P><STRONG><a name="[1fd]"></a>ros::Time::Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros4TimeC1Ev), UNUSED)

<P><STRONG><a name="[15a]"></a>ros::Publisher::publish(const ros::Msg*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_node.o(i._ZN3ros9Publisher7publishEPKNS_3MsgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joint_State_pub()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_pub()
</UL>

<P><STRONG><a name="[18d]"></a>ros::Publisher::Publisher(const char*, ros::Msg*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros9PublisherC1EPKcPNS_3MsgEi))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
</UL>

<P><STRONG><a name="[1fe]"></a>ros::Publisher::Publisher__sub_object(const char*, ros::Msg*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uart_node.o(i._ZN3ros9PublisherC1EPKcPNS_3MsgEi), UNUSED)

<P><STRONG><a name="[86]"></a>std_msgs::Time::deserialize(unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart_node.o(i._ZN8std_msgs4Time11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[88]"></a>std_msgs::Time::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN8std_msgs4Time6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[87]"></a>std_msgs::Time::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN8std_msgs4Time7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[177]"></a>std_msgs::Time::Time()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_node.o(i._ZN8std_msgs4TimeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::Time()
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
</UL>

<P><STRONG><a name="[1ff]"></a>std_msgs::Time::Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uart_node.o(i._ZN8std_msgs4TimeC1Ev), UNUSED)

<P><STRONG><a name="[8a]"></a>std_msgs::Header::deserialize(unsigned char*)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, uart_node.o(i._ZN8std_msgs6Header11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std_msgs::Header::deserialize(unsigned char*) &rArr; void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[8c]"></a>std_msgs::Header::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN8std_msgs6Header6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[8b]"></a>std_msgs::Header::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(i._ZN8std_msgs6Header7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[16e]"></a>std_msgs::Header::Header()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_node.o(i._ZN8std_msgs6HeaderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::JointState()
</UL>

<P><STRONG><a name="[200]"></a>std_msgs::Header::Header__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uart_node.o(i._ZN8std_msgs6HeaderC1Ev), UNUSED)

<P><STRONG><a name="[5e]"></a>sensor_msgs::JointState::serialize(unsigned char*) const</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, uart_node.o(i._ZNK11sensor_msgs10JointState9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sensor_msgs::JointState::serialize(unsigned char*) const &rArr; std_msgs::Header::serialize(unsigned char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs10JointStateE)
</UL>
<P><STRONG><a name="[62]"></a>sensor_msgs::Imu::serialize(unsigned char*) const</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, uart_node.o(i._ZNK11sensor_msgs3Imu9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_msgs::Imu::serialize(unsigned char*) const &rArr; geometry_msgs::Quaternion::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[65]"></a>geometry_msgs::Quaternion::serialize(unsigned char*) const</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, uart_node.o(i._ZNK13geometry_msgs10Quaternion9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geometry_msgs::Quaternion::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[68]"></a>geometry_msgs::Twist::serialize(unsigned char*) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_node.o(i._ZNK13geometry_msgs5Twist9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = geometry_msgs::Twist::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[6c]"></a>geometry_msgs::Vector3::serialize(unsigned char*) const</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, uart_node.o(i._ZNK13geometry_msgs7Vector39serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::serialize(unsigned char*) const
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[70]"></a>rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, uart_node.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[74]"></a>rosserial_msgs::Log::serialize(unsigned char*) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_node.o(i._ZNK14rosserial_msgs3Log9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rosserial_msgs::Log::serialize(unsigned char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[77]"></a>rosserial_msgs::TopicInfo::serialize(unsigned char*) const</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart_node.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rosserial_msgs::TopicInfo::serialize(unsigned char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[85]"></a>std_msgs::Time::serialize(unsigned char*) const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart_node.o(i._ZNK8std_msgs4Time9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[89]"></a>std_msgs::Header::serialize(unsigned char*) const</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, uart_node.o(i._ZNK8std_msgs6Header9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std_msgs::Header::serialize(unsigned char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[153]"></a>std::asin(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, robotarm.o(i._ZSt4asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::asin(float) &rArr; asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
</UL>

<P><STRONG><a name="[14f]"></a>std::sqrt(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mahony_filter.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
</UL>

<P><STRONG><a name="[15f]"></a>std::atan2(float, float)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mahony_filter.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::atan2(float, float) &rArr; atan2f &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
</UL>

<P><STRONG><a name="[c1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[191]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[84]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> uart_node.o(.constdata__ZTVN3ros3MsgE)
<LI> uart_node.o(.constdata__ZTVN3ros15NodeHandleBase_E)
<LI> uart_node.o(.constdata__ZTVN3ros11Subscriber_E)
</UL>
<P><STRONG><a name="[17c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[181]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[182]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[183]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[185]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[186]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[187]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[189]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[18a]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[18b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[af]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[16a]"></a>acosf</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, acosf.o(i.acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = acosf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
</UL>

<P><STRONG><a name="[160]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
</UL>

<P><STRONG><a name="[154]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
</UL>

<P><STRONG><a name="[150]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
</UL>

<P><STRONG><a name="[131]"></a>get_icm20602_data</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, seekfree_icm20602.o(i.get_icm20602_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_icm20602_data &rArr; get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*) &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUs_update
</UL>

<P><STRONG><a name="[130]"></a>get_icm20602_imu4_remap_data_simspi</STRONG> (Thumb, 378 bytes, Stack size 80 bytes, seekfree_icm20602.o(i.get_icm20602_imu4_remap_data_simspi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_icm20602_imu4_remap_data_simspi &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUs_update
</UL>

<P><STRONG><a name="[192]"></a>icm20602_init</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.icm20602_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = icm20602_init &rArr; icm20602_init_simspi(ICM_CS_POINTER) &rArr; icm20602_self4_check(GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_r_reg_byte(unsigned char, unsigned char*, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_simspi(ICM_CS_POINTER)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>key_teleop_ctrl</STRONG> (Thumb, 282 bytes, Stack size 248 bytes, abstract_layer.o(i.key_teleop_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = key_teleop_ctrl &rArr; Vector_Control_with_Time_Limited &rArr; Motor_Control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[193]"></a>loop</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uart_node.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = loop &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joint_State_pub()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_pub()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>main</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; Get_Gyro_Static_Error &rArr; get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*) &rArr; icm_simspi_r_reg_bytes(unsigned char, unsigned char*, unsigned char, GPIO_TypeDef*, unsigned short) &rArr; icm_simspi_wr_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[197]"></a>setup</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart_node.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = setup &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::advertise(ros::Publisher&)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
</UL>

<P><STRONG><a name="[17b]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[14b]"></a>xiangdui</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, robotarm.o(i.xiangdui))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xiangdui &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conj(float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
</UL>

<P><STRONG><a name="[9a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[7c]"></a>ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getMsgType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
</UL>
<P><STRONG><a name="[7b]"></a>ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getEndpointType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
</UL>
<P><STRONG><a name="[7a]"></a>ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::callback(unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::callback(unsigned char*) &rArr; sensor_msgs::JointState::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
</UL>
<P><STRONG><a name="[7d]"></a>ros::Subscriber&lang;sensor_msgs::JointState, void&rang;::getMsgMD5()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN11sensor_msgs10JointStateEvEE)
</UL>
<P><STRONG><a name="[80]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[7f]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getEndpointType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[7e]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*) &rArr; geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[81]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgMD5()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[18f]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int) &rArr; geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber_::Subscriber___sub_object()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
</UL>

<P><STRONG><a name="[201]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber__sub_object(const char*, void(*)(const geometry_msgs::Twist&), int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, uart_node.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei), UNUSED)

<P><STRONG><a name="[19b]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[19c]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime() &rArr; std_msgs::Time::Time()
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[159]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now()</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::normalizeSecNSec(unsigned&, unsigned&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joint_State_pub()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_pub()
</UL>

<P><STRONG><a name="[82]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*) &rArr; STM32Hardware::write(unsigned char*, int) &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::write(unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
</UL>
<P><STRONG><a name="[83]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()</STRONG> (Thumb, 678 bytes, Stack size 16 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
</UL>
<P><STRONG><a name="[19e]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::syncTime(unsigned char*) &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::normalizeSecNSec(unsigned&, unsigned&)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::deserialize(unsigned char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[198]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::advertise(ros::Publisher&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[18c]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_uart_node_c_nh
</UL>

<P><STRONG><a name="[202]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle___sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uart_node.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev), UNUSED)

<P><STRONG><a name="[16b]"></a>void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_node.o(t._ZN3ros3Msg8arrToVarIjPhEEvRT_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void ros::Msg::arrToVar&lang;unsigned, unsigned char*&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::deserialize(unsigned char*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::deserialize(unsigned char*)
</UL>

<P><STRONG><a name="[17a]"></a>void ros::Msg::varToArr&lang;unsigned char*, unsigned&rang;(T1, T2)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_node.o(t._ZN3ros3Msg8varToArrIPhjEEvT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::serialize(unsigned char*) const
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
</UL>

<P><STRONG><a name="[19f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Superposition
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1a2]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a5]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1ab]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Superposition
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[1a7]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a8]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
</UL>

<P><STRONG><a name="[1a9]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[203]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[204]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Superposition
</UL>

<P><STRONG><a name="[1aa]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1ae]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Superposition
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevVector_Quantification
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ac]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a4]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
</UL>

<P><STRONG><a name="[1ad]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1af]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Control_with_Time_Limited
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1b1]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_teleop_ctrl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_arm_controller
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q(float, float, float*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_pub()
</UL>

<P><STRONG><a name="[1b2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionReviser
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gyro_Static_Error
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth50HzLPF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth30HzLPF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[1b4]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b6]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1b9]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth50HzLPF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth30HzLPF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[1b7]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_data_simspi(ICM_CS_POINTER, IMU_data*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_imu4_remap_data_simspi
</UL>

<P><STRONG><a name="[205]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
</UL>

<P><STRONG><a name="[1b8]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1bc]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotArm_Resolver
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xiangdui
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth50HzLPF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth30HzLPF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxiangdui(float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross(float*, float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[1ba]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiajiao(float*, float*)
</UL>

<P><STRONG><a name="[1bb]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[1bd]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[199]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Computation(Filter6axisTypeDef, IMU_data*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUupdate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross(float*, float*, float*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot(float*, float*, float*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_pub()
</UL>

<P><STRONG><a name="[1bf]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[94]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1a6]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[180]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[188]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[1c0]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ee]"></a>[local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_rcc_c_b7071a4b9RCC_DelayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[de]"></a>[local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[e7]"></a>[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f1xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e6]"></a>[local to stm32f1xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f1xx_hal_cortex_c_2992dbc026__NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[105]"></a>[local to stm32f1xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5217TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[107]"></a>[local to stm32f1xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5217TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[108]"></a>[local to stm32f1xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5217TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f9]"></a>[local to stm32f1xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5218TIM_ITRx_SetConfigEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f8]"></a>[local to stm32f1xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5224TIM_TI1_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[fa]"></a>[local to stm32f1xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_tim_c_a9d95b5224TIM_TI2_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f1xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[59]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[125]"></a>[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f14UART_SetConfigEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>[local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f15UART_Receive_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>[local to stm32f1xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f16UART_Transmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[58]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_DMATxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[11c]"></a>[local to stm32f1xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_EndRxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[174]"></a>[local to stm32f1xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f18UART_EndTxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[5a]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; USART_RxCplt_ROSCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[122]"></a>[local to stm32f1xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f19UART_EndTransmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*) &rArr; HAL_UART_TxCpltCallback &rArr; USART_TxCplt_ROSCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[57]"></a>[local to stm32f1xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f20UART_DMATransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*) &rArr; HAL_UART_TxCpltCallback &rArr; USART_TxCplt_ROSCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f1xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[8d]"></a>__sti___11_uart_node_c_nh</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, uart_node.o(i.__sti___11_uart_node_c_nh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___11_uart_node_c_nh &rArr; ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int) &rArr; geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::Twist&), int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::Publisher(const char*, ros::Msg*, int)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber_::Subscriber___sub_object()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::JointState::JointState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_node.o(.init_array)
</UL>
<P><STRONG><a name="[1b0]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1a3]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1be]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1b5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ba]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[55]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
